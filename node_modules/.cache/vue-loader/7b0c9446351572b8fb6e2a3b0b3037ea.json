{"remainingRequest":"/home/runner/work/U2_Etica_Profesional/U2_Etica_Profesional/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Etica_Profesional/U2_Etica_Profesional/src/views/curso/Tema3.vue?vue&type=template&id=27d91861&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Etica_Profesional/U2_Etica_Profesional/src/views/curso/Tema3.vue","mtime":1740288702980},{"path":"/home/runner/work/U2_Etica_Profesional/U2_Etica_Profesional/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Etica_Profesional/U2_Etica_Profesional/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Etica_Profesional/U2_Etica_Profesional/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Etica_Profesional/U2_Etica_Profesional/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Etica_Profesional/U2_Etica_Profesional/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}